
options
{
  JDK_VERSION = "1.7";
  STATIC = false;
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(BeetlParser)

package org.cheetah;

import org.cheetah.core.*;

public class BeetlParser {

  private ParserContext context;

  public void setContext(ParserContext context) {
    this.context = context;
  }

  public static void main(String args[]) throws ParseException {
    BeetlParser parser = new BeetlParser(System.in);
  }

}

PARSER_END(BeetlParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"

}


/* SEPARATORS */

TOKEN :
{
  < DOLLAR: "$" >
| < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < LBLOCK: "<%" >
| < RBLOCK: "%>" >
//| < COMMA: "," >
| < DOT: "." >
| < AT: "@" >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
| < ELLIPSIS: "..." >
}


/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

TOKEN :
{

  < TEXT: (<LETTER>|<BLANK>|<DIGIT>)* >
  | < IDENTIFIER: <LETTER>(<DIGIT_LETTER>)* >
  | < VAR_PATH: <LETTER>(<DIGIT_LETTER>|<DOT>)* >
  | < #LETTER: ["A"-"Z", "a"-"z", "_"] >
  | < #DIGIT_LETTER: <DIGIT> | [ "A"-"Z", "a"-"z", "_"] >
  | < #DIGIT: ["0"-"9"] >
  | < BLANK:  " " | "\t" | "\n" | "\r" >
  | < #START_TAG : "<" | "<%" | "[#" >
  | < #END_TAG : "</" | "</#" | "[/#" >
  | < #CLOSE_TAG1 : (<BLANK>)* (">" | "]") >
  | < #CLOSE_TAG2 : (<BLANK>)* ("/")? (">" | "]") >

}

String parse() :
{
String all = "";
String ret = "";

}
{
  (
    ret = block() {all +=ret;}
    | ret = var() {all += ret;}
    | ret = text() {all+= ret;}
//    | comment()
  )*
  {return "all:" + all;}
  <EOF>
  {return "nnnnnnnnnnnn";}

}

String block() :
{}
{
  <LBLOCK>bockStatement()<RBLOCK>
 {
   System.out.println("bockStatement");

   return "";
 }
}

String comment() :
{}
{

 {return "";}
}

String bockStatement():
{
}
{

 varlibeDeclaration()
 |statement()

 {return "";}
}

String varlibeDeclaration():
{
}
{

 "var" <BLANK> "=" expression()
 {return "";}
}

String expression():
{}
{


  {return "";}
}

String assignment():
{}
{

 <IDENTIFIER> assignmentOperator () statement()
 {return "";}
}

void assignmentOperator() :
{}
{
  "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|="
}

String statement():
{
}
{

 ifStatement()
 | forStatement()
 | whileStatement()
 | switchStatement()
 {return "";}

}

String ifStatement() :
{}
{
 "if" <LPAREN> "asdf" <RPAREN> <LBRACE>statement()<RBRACE> [elseStatement()]
 {return "";}
}

String elseStatement():
{}
{
  "else" <LBRACE>statement()<RBRACE>
 {return "";}
}

String forStatement() :
{}
{
 "for"<LPAREN><RPAREN> <LBRACE>statement()<RBRACE>
 {return "";}
}

String whileStatement() :
{}
{
 {return "";}
}

String switchStatement() :
{}
{
 {return "";}
}



String text() :
{
  Token token = null;
}
{

   token=<TEXT>
   {
     System.out.println("TEXT");

     return "xxx" +token.image + "asdf";
   }
}

String var() :
{
    Token varPath = null;
}
{

    <DOLLAR><LBRACE>varPath=<VAR_PATH><RBRACE>
    {

       System.out.println("var");

        System.out.println(context.getValueByPath(varPath.image));


    return context.getValueByPath(varPath.image).toString();
    }
}

void Literal() :
{}
{
  <INTEGER_LITERAL>
|
  <FLOATING_POINT_LITERAL>
|
  <CHARACTER_LITERAL>
|
  <STRING_LITERAL>
|
  BooleanLiteral()
|
  NullLiteral()
}

void BooleanLiteral() :
{}
{
  "true"
|
  "false"
}

void NullLiteral() :
{}
{
  "null"
}